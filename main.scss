// Import global rules from layout file
@use "./sass/layout/global-rules";
@use "./sass/pages/contact";
@use "./sass/variables/colors-hero";
@use "./sass/variables/media-queries";
// Forgettin as * is a source of many frustration !
@use "./sass/helpers/mixins" as *;
@use "./sass/helpers/functions" as *;

.main {
	color: dodgerblue;
}
// variables
$alt_color: green;
.header {
	color: $alt_color;
}
.footer {
	$alt_color: black;
	$accent_color: yellow !global;
	color: $alt_color;

	.pudding {
		color: $alt_color;
	}
}
.copyright {
	color: $alt_color;
}
.year {
	color: $accent_color;
}
.month {
	// color namespace stuff
	color: colors-hero.$accent_color_vars_dir;
}
@media screen and (media-queries.$max_mobile) {
	.year {
		color: lime;
	}
}

// nesting
.parent > {
	.child {
		padding: 20px;
	}
	.test {
		padding: 20px;
	}
}

// I don't know why the sass compiler doesn't do that grouping when two child classes
// have the same properties in them .
/*
  Ans : That's the work of something like postcss-merge-rules . Sass just compiles sass
  code to css. It doesn't do any logical grouping for our code . 
*/
.parent > .child,
.parent > .test {
	padding: 20px;
}
.parent {
	/* Adding the below color property (or any other property ) is important otherwise
	sass will output an empty parent class (which will show a css warning ) . 
	
	The reason for that ? 
	=> since we declared .parent as a parent class, sass compiles it in the final css 
	(that's what chat said ) . 
	
	In a more complete setup, we will have tools that remove empty css classes so this 
	won't be an issue */
	color: lightseagreen;
	> .child {
		margin: 20px;
	}
	.test {
		padding: 2px;
	}
	&.red {
		color: red;
	}
	&.xl {
		// Not the real value associated with a tailwind class . Just a class I invented !
		font-size: 24px;
	}
	&:hover {
		background-color: #ddd;
	}
	&:hover {
		.title {
			font-weight: bold;
		}
	}
	/* 
  // another equivalent we can use , but the above uses sass nesting
    &:hover .title {
      font-weight: bold;
    }
  */
	[dir="rtl"] & {
		direction: rtl;
	}
}

// property declarations and placeholder
.box {
	padding: {
		top: 10px;
		left: 12px;
	}
	margin: auto {
		right: 10px;
	}
	border: 1px solid black {
		right-color: coral;
	}
}
.article {
	@extend .box;
	font-size: 20px;
}

// use a placeholder
%secondary-button {
	border: 1px solid hotpink;
	color: white;
	border-radius: 3rem;
}
.cta-button {
	@extend %secondary-button;
}

// control flow
$theme: "dark";
.page {
	@if $theme == "light" {
		background-color: #ddd;
	} @else {
		background-color: #444;
	}
}

$rounded: false;
.my-box {
	border-width: 4px;
	border-radius: if($rounded, 12px, null);
}

// Arrow container assignment
// sass code -- ignoring js style of variable declaration
$arrow_direction: "left";
%arrow_pointing_upwards {
	top: -40px;
	left: 50%;
	transform: translateX(-50%);
	border-bottom-color: red;
}

.arrow-container {
	border: 1px solid black;
	display: flex;
	justify-content: center;
	align-items: center;
	font-size: 20px;
	width: 200px;
	height: 200px;
	position: relative;
	margin: 50px auto;
	&::before {
		content: "";
		position: absolute;
		border: 20px solid transparent;
		// I found that the element is centered by default, but I will add the below
		// code anyway for the sake of completeness
		@if $arrow_direction == "top" {
			@extend %arrow_pointing_upwards;
		} @else if $arrow_direction == "right" {
			@extend %arrow_pointing_to_the_right;
		} @else if $arrow_direction == "bottom" {
			@extend %arrow_pointing_downwards;
		} @else if $arrow_direction == "left" {
			@extend %arrow_pointing_to_the_left;
		} @else {
			@error "The provided direction #{$arrow_direction} is not valid";
		}
	}
}

%arrow_pointing_to_the_right {
	top: 50%;
	right: -40px;
	transform: translateY(-50%);
	border-left-color: red;
}
%arrow_pointing_downwards {
	bottom: -40px;
	left: 50%;
	// right is not working for some unknown reason to me !
	// right: 50%;
	transform: translateX(-50%);
	border-top-color: red;
}
%arrow_pointing_to_the_left {
	top: 50%;
	left: -40px;
	transform: translateY(-50%);
	border-right-color: red;
}

// Mixin and include

.links {
	@include list-reset();
}

.cirlce-100 {
	@include circle(100px);
}

.circle-center {
	@include circle(12px);
	@include centering;
	border: 1px solid black;
}

// for loop

@for $i from 1 through 3 {
	.class-#{$i} {
		font-size: #{$i * 2 + 10};
	}
}
$dimensions: 0;
@for $i from 1 through 3 {
	.circle-#{100 + $dimensions} {
		width: $dimensions + 100px;
		height: $dimensions + 100px;
		border-radius: 50%;
	}
	$dimensions: $dimensions + 100;
}

// each
$themes: red, green, blue, orange;

@each $theme in $themes {
	.#{$theme}-theme {
		.product {
			background-color: white;
			border-bottom: 2px solid $theme;
			.title {
				color: $theme;
				font-weight: bold;
			}
		}
	}
}
$socials: (
	"fb": blue,
	"yt": red,
	"github": black,
);
@each $platform, $color in $socials {
	.#{$platform} {
		background-color: $color;
		color: white;
		&::before {
			content: $platform;
		}
	}
}
// destructuring = إعادة توزيع البيانات
$classes: "one" 20px red, "two" 24px green, "three" 28px blue;
@each $class_name, $font_size, $color in $classes {
	.#{$class_name} {
		font-size: $font_size;
		background-color: $color;
		color: white;
		padding: $font_size / 2;
	}
}

// while loop
$start: 1;
@while ($start <= 10) {
	.width-#{$start * 100} {
		width: $start * 100px;
		height: ($start * 100px) / 2;
	}
	$start: $start + 1;
}

// bootstrap grid system
$grid_cols: 12;
@for $i from 1 through $grid_cols {
	.col-#{$i} {
		width: percentage($i / $grid_cols);
	}
}

// functions 
$width: 121px;
.element-using-fn {
	width: $width;
	height: half($width);
	// the 10px is just a space between the el and the other elements 
	top: calculateTopOffset(100px, 110px, 150px) + 10px;
}

// skipped the code for L17 practice mixin with content as we trained on it in the 
// previous assignment

// @media lesson 18
.media {
	@include breakpoints(small) {
		font-weight: bold;
	}
}
